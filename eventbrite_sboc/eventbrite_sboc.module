<?php
/**
 * @file
 * eventbrite_sboc.module - manage sending purchased assets to SBOC registrants
 */
 
 require_once(drupal_get_path('module', 'eventbrite_sboc'). '/includes/eventbrite_sboc_helpers.inc');
 
 /** defines **/
 define('EVENTBRITE_BASE_URL', 'https://www.eventbrite.com/json/');
 define('EVENTBRITE_SBOC_MAIL_TOKEN', 'eventbrite_sboc_mail_contact');
 //define('EVENTBRITE_SBOC_LIST_SORT_ORDER', 'ASC');
 define('EVENTBRITE_SBOC_LIST_SORT_ORDER', 'DESC');
 define('EVENTBRITE_SBOC_EMAIL_SEND_LIMIT', 100); 
 define('EVENTBRITE_SBOC_QUESTION_ID_CATEGORY', 2968673); 
 define('EVENTBRITE_SBOC_QUESTION_ID_CHILD_LAST_NAME', 3007605);  
 define('EVENTBRITE_SBOC_QUESTION_ID_CHILD_FIRST_NAME', 3007609);
 define('EVENTBRITE_SBOC_QUESTION_ID_REGION', 2970301);	
 define('EVENTBRITE_SBOC_REGISTRATION_AMT_STD', 28);
 define('EVENTBRITE_SBOC_REGISTRATION_LOW_DATE', _eventbrite_sboc_get_date('-1 day')); 
 define('EVENTBRITE_SBOC_MAIL_KEY', 'send_manuals');
 define('EVENTBRITE_SBOC_MODULE_NAME', basename(__FILE__,'.module'));
 define('EVENTBRITE_SBOC_API_AUTH_PATH', 'admin/config/system/eventbrite_sboc/api_auth');
 define('EVENTBRITE_SBOC_EXTRA_MESSAGE_1', ' The coaching and pronunciation CD will be mailed in January');
 define('EVENTBRITE_SBOC_ORDER_STATUS', 'PayPal Completed');
 define('EVENTBRITE_SBOC_PAGE_LIMIT', 10);
 define('EVENTBRITE_SBOC_DATE_SUB_PART', 10);
 define('EVENTBRITE_SBOC_DATE_PACIFIC_TZ', 'America/Los Angeles');
 define('EVENTBRITE_SBOC_DATE_EASTERN_TZ', 'America/Toronto');

 /**
 * Implementation of hook_help
 */
 
/*  require_once(drupal_get_path('module', 'eventbrite_sboc'). '/includes/eventbrite_sboc_helpers.inc'); */
 
 function eventbrite_sboc_help($path, $arg) {
    $output = '';
	switch($path){
		case 'admin/help#eventbrite_sboc':
		  $output = '<p>'. t('Provides automatic email messaging services for SBOC for Eventbrite managed events.').'</p>';
		  break;		
		default:
          break;		
	}
    return $output;
 }
 
 /**
 * Implementation of hook_permission
 */
 function eventbrite_sboc_permission() {
    $result = array(
	  'administer ebsboc' => array(
	     'title' => t('Configure Eventbrite SBOC'),
		 'description' => t('Allow authorized users to configure the module for use'),
	   ),
	);
	return $result;
 }
  
 /**
 * Implementation of hook_menu
 */
 function eventbrite_sboc_menu(){ 
    // Admin menus below here.
	
	$items = array();
	
	$items['eventbrite_sboc/kickservice'] = array(
	  'title' => t('Execute'),
	  'description' => t('Manually execute the service'),
	  'type'=> MENU_CALLBACK|MENU_NORMAL_ITEM,
	  'page callback' => '_eventbrite_sboc_kick_service',
	  'access arguments' => array('administer ebsboc'),
	);
	
	$items['admin/config/system/eventbrite_sboc/attendee_report/%/%'] = array(
	  'title' => t('Display Report'),
	  'description' => 'Display attendee list report',
	  'type'=> MENU_CALLBACK|MENU_NORMAL_ITEM,
	  'page callback' => '_eventbrite_sboc_display_attendee_list_from_db',
	  'page arguments' => array(5,6),
	  'access arguments' => array('administer ebsboc'),
	);
	
	/********************************Administrative links below***********************************/
	
    $items['admin/config/system/eventbrite_sboc'] = array(
	   'title' => 'Configure Eventbrite for SBOC',
	   'description' => 'Enter Eventbrite API credentials and manage service preferences',
	   'page callback' => '_eventbrite_sboc_build_config_forms',
	   'access arguments' => array('administer ebsboc'),
	   'file' => 'eventbrite_sboc_admin_form.inc',
	   'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
	);
	
	$items['admin/config/system/eventbrite_sboc/main'] = array(
	   'title' => 'Configure Eventbrite SBOC',
       'type' => MENU_DEFAULT_LOCAL_TASK,
	);
		
	$items['admin/config/system/eventbrite_sboc/api_auth'] = array(
		'title' => 'Authorization',
		'type' =>  MENU_LOCAL_TASK,
		'description' => 'Eventbrite API calls - Authentication (OAUTH)',		
		'page callback' => '_eventbrite_sboc_authorization_api',
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc_admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 10,
	);	
	
	$items['admin/config/system/eventbrite_sboc/api_pending_list'] = array(
		'title' => 'Attendees - Pending',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Eventbrite API calls - Attendee List',		
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eventbrite_sboc_pending_list_form'),
		'access arguments' => array('administer ebsboc'),
		'weight' => 20,
	);
	
	$items['admin/config/system/eventbrite_sboc/attendee_report'] = array(
		'title' => 'Attendees - Confirmed',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Run attendees report',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eventbrite_sboc_config_form_attendee_report'),
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc_admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 30,
	);	
		
	$items['admin/config/system/eventbrite_sboc/email'] = array(
		'title' => 'Email Settings',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Email Contact',
		'page callback' => '_eventbrite_sboc_build_email_test_forms',
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc_admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 40,
	);
	
	$items['admin/config/system/eventbrite_sboc/debug'] = array(
		'title' => 'Debugging',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Set debugging options for this module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eventbrite_sboc_debug_config_form'),
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc_admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 50,
	);
	
	$items['eventbrite_sboc/logout'] = array(
		'title' => 'Eventbrite Logout',
		'type' =>  MENU_CALLBACK,
		'description' => 'Logged out of Eventbrite',
		'page callback' => '_eventbrite_sboc_api_logout',
		'access arguments' => TRUE,
	);	
	
	$items['admin/config/system/eventbrite_sboc/api_pending_list/1'] = array(
		'title' => 'Attendees - Pending',
		'type' =>  MENU_CALLBACK,
		'description' => 'Eventbrite API calls - Attendee List',		
		'page callback' => '_eventbrite_sboc_get_pending_list',
		'page arguments' => array(5),
		'access arguments' => array('administer ebsboc'),
	);
	
	return $items;
 }
 
  // -------------------------------------bof: hooks ---------------------------------------------- //
 
 function eventbrite_sboc_cron(){
   $queue = DrupalQueue::get('email_distribution');
   $data = variable_get('site_mail', _eventbrite_sboc_api_user_email());
   if (variable_get('eventbrite_sboc_email_send_option','test') == 'live'){
     $data = '';
   }	 
   $queue->createItem($data);
 }
 
 function eventbrite_sboc_cron_queue_info(){
   $queues['email_distribution'] = array(
    'worker callback' => '_eventbrite_sboc_email_auto_sender',
    'time' => 120,
   );
   return $queues;
 }
 
 function eventbrite_sboc_form_alter(&$form, $form_state, $form_id){
   //drupal_set_message($form_id);
   switch($form_id){
     case '_eventbrite_sboc_debug_config_form':
	   /* $form['#submit'][] = '_eventbrite_sboc_debug_set_pl_timespan'; */
	   break;
	 case '_eventbrite_sboc_pending_list_form':
       $form['#submit'][] = '_eventbrite_sboc_generate_pending_list';	 
	   break;
   }   
 } 
 
 // -------------------------------------eof: hooks ---------------------------------------------- //
 
 function _eventbrite_sboc_email_auto_sender($data){ 
    if (variable_get('eventbrite_sboc_app_state', 0) == 1) {
       _eventbrite_sboc_get_pending_list();
	   _eventbrite_sboc_process_emails($data);
    }
	/* else{
	  watchdog(EVENTBRITE_SBOC_MODULE_NAME, t('Service is disabled'), array(), WATCHDOG_NOTICE); 
	} */
 }
 
 /**** Code specific to ulitmate cron module ****/  
 // '*/15 * * * *';   
 /* 
 function _eventbrite_sboc_cronapi($op, $job = NULL){  
   switch($op) {
    case 'list':
      return array(
        '_eventbrite_sboc_cronjob_1' => 'Cron-1 Handler',
      );

    case 'rule':
      switch($job) {
        case '_eventbrite_sboc_cronjob_1': 
		  return '';
      );

    case 'execute':
      switch($job) {
        case '_eventbrite_sboc_cronjob_1':
          _eventbrite_sboc_email_auto_sender(eventbrite_sboc_api_user_email());
          break;
      }

  }
 }  */
 /**** Code specific to ulitmate cron module ****/
 
 function _eventbrite_sboc_kick_service($email=''){    
    _eventbrite_sboc_get_pending_list();
	_eventbrite_sboc_process_emails($email);	
 }
 
 function _eventbrite_sboc_authorization_api(){
   $eventbrite_api_key =  _eventbrite_sboc_api_key();
   $eventbrite_api_user_key = _eventbrite_sboc_api_user_key();
   $eventbrite_oauth_key = _eventbrite_sboc_oauth_key();  
   return theme('login_widget', array('eventbrite_api_key' => $eventbrite_api_key, 'eventbrite_oauth_key' =>     $eventbrite_oauth_key,));  
 }
 
 function eventbrite_sboc_theme($existing, $type, $theme, $path){
    return array(
	   'login_widget' => array (		
			'template' => 'eventbrite_sboc_login',
			'path' => drupal_get_path('module', 'eventbrite_sboc') .'/templates',
	   ),
	   'attendee_list' => array(
	      'variables' => array('attendee_list' => NULL, 'attendee_list_count' => NULL),
	   ),
	   'attendee_list_from_db' => array(
	      'variables' => array('attendee_list' => NULL, 'attendee_list_count' => NULL, 'start_date' => NULL,'end_date' => NULL),
	   ),
	);
 }
 
 function theme_attendee_list($variables){
   $attendee_list_count = $variables['attendee_list_count'];
   $attendee_list = $variables['attendee_list'];
   $ra_attendee_list =  array(
	  'attendee_list_count_line' => array(
		 '#type' => 'markup',
		 '#prefix' => '<p><strong>',
		 '#markup' => format_string('Total registered attendees for this event on Eventbrite: !d', array('!d' => $attendee_list_count)),
		 '#suffix' => '</strong></p>',
       ),
	   'attendee_list_table' => array(
	      '#type' => 'markup', 
		  '#markup' => $attendee_list,
	   ),
   );
   $output = drupal_render($ra_attendee_list);
   return $output;
 }
 
 function theme_attendee_list_from_db($variables){
   $attendee_list_count = $variables['attendee_list_count'];
   $start_date = $variables['start_date'];
   $end_date = $variables['end_date'];
   $attendee_list = $variables['attendee_list'];
   $ra_attendee_list =  array(
	  'attendee_list_count_line' => array(
		 '#type' => 'markup',
		 '#prefix' => '<p><strong>',
		 '#markup' => format_string('Date Range: !d1 to !d2', array('!d1' => $start_date, '!d2' => $end_date,)),
		 '#suffix' => '</strong></p>',
       ),
	   'attendee_list_table' => array(
	      '#type' => 'markup', 
		  '#markup' => $attendee_list,
	   ),
   );
   $output = drupal_render($ra_attendee_list);
   return $output;
 }
  
 
 function _eventbrite_sboc_sort_attendees_by_id($a, $b){   
   $result = -1;
   $sort = variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER);
   if ($a->attendee->id == $b->attendee->id){
      $result = 0;
   }
   else {
      if ($sort == 'ASC'){
        $result = ($a->attendee->id > $b->attendee->id) ? 1 : -1;
	  }else{
	    $result = ($a->attendee->id < $b->attendee->id) ? 1 : -1;
	  }
   }
   return $result;
 }
 
 function _eventbrite_sboc_sort_attendees_by_create_date($a, $b){
   $tz_name = _eventbrite_sboc_get_timezone_by_index(variable_get('eventbrite_event_registrations_tz', 0));
   $_a->created = _eventbrite_sboc_get_date_in_tz($a->attendee->created, $tz_name);
   $_b->created = _eventbrite_sboc_get_date_in_tz($b->attendee->created, $tz_name);
   $sort = variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER);
   $result = -1;
   if ($_a->created == $_b->created){
      $result = 0;
   }
   else {
      if ($sort == 'ASC'){
        $result = ($_a->created > $_b->created) ? 1 : -1;
	  }else{
	    $result = ($_a->created < $_b->created) ? 1 : -1;
	  }
   }
   return $result;
 }
 
 function _eventbrite_sboc_OAuth_credentials(&$auth_key){
    $result = FALSE;
    
	try{
	  $auth_key = array(
        'client_secret' => _eventbrite_sboc_oauth_key(),     
	    'access_token' => NULL,
	    'client_id' =>  _eventbrite_sboc_api_key(),
	    'app_key' => _eventbrite_sboc_api_key(),
	    'user_key' => _eventbrite_sboc_api_user_key(),
      );
      $oauth_login_result = Eventbrite::OAuthLogin($auth_key, '_eventbrite_sboc_get_oauth_token', '_eventbrite_sboc_set_oauth_token', '_eventbrite_sboc_del_oauth_token');	  
	  $auth_key['access_token'] = _eventbrite_sboc_get_oauth_token();
	  $auth_key['oauth_login_result'] = $oauth_login_result;
	  $result = ($auth_key['access_token'] != NULL);
	  if (!$result){
	    throw new Exception('Unable to get access token for OAuth authentication');
	  }
	}catch(Exception $e){
	   watchdog(EVENTBRITE_SBOC_MODULE_NAME, t($e->getMessage()), array(), WATCHDOG_ERROR);
	}
	
    return $result;
 }
 
 function _eventbrite_sboc_user_credentials(){
      
   $auth_key = array(
     'client_secret' => _eventbrite_sboc_oauth_key(),     
	 'client_id' =>  _eventbrite_sboc_api_key(),
	 'app_key' => _eventbrite_sboc_api_key(),
	 'user_key' => _eventbrite_sboc_api_user_key(),
	 'user_email' => _eventbrite_sboc_api_user_email(),
	 'user_pwd' => _eventbrite_sboc_api_user_password(),
    );
	
    return $auth_key;
 }
 
 function _eventbrite_sboc_pending_list_form(){
    
	$form['eventbrite_app_pending_list'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('Pending List Settings'),
	);
 
    $option_days = drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
	if (!isset($_SESSION['pending_list_time_span'])) {
	   $_SESSION['pending_list_time_span'] = 1;
	}
	$num_days = array_search((int)$_SESSION['pending_list_time_span'], $option_days);
	$form['eventbrite_app_pending_list']['eventbrite_sboc_app_pl_time_span'] = array(
	   '#type' => 'select',
	   '#title' => t('Time span (in days) for pending list'),
       '#options' =>  $option_days,	   
	   '#default_value' => ((isset($_SESSION['pending_list_time_span'])) ? $num_days : 1),
	   '#description' => t('Select the time span (in days) used to bulid the list of pending attendees. <strong>Please Note:</strong> This setting is session specific.'),
	);  
	
	$sort_order = drupal_map_assoc(array('ASC', 'DESC'));
	$form['eventbrite_app_pending_list']['eventbrite_sboc_app_data_sort_order'] = array(
	   '#type' => 'select',
	   '#title' => t('Date sort order'),
       '#options' =>  $sort_order,	   
	   '#default_value' => variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER),
	   '#description' => t('Select the sort order (by date) for attendee recordsd: 1: ASCending 2: DESCending'),
	); 
	
	$form['eventbrite_app_pending_list']['eventbrite_sboc_submit'] = array(
	   '#type' => 'submit',
	   '#value' => t('Generate List'),		
	);	
	
    return $form;
 }
 
 function _eventbrite_sboc_generate_pending_list($form, &$form_state){
	$num_days = (int)$form_state['values']['eventbrite_sboc_app_pl_time_span'];
	$_SESSION['pending_list_time_span'] = $num_days;
	drupal_set_message(t('Time span used to select records for \'Pending List\'= !days day(s). Low date: !low_date', array('!days' => $num_days, '!low_date' => _eventbrite_sboc_get_date("-$num_days day"))));
	variable_set('eventbrite_sboc_app_data_sort_order', $form_state['values']['eventbrite_sboc_app_data_sort_order']);
	$form_state['redirect'] = 'admin/config/system/eventbrite_sboc/api_pending_list/1';
 }

 function _eventbrite_sboc_get_pending_list($display_list = 0){
   $result = array();  
   $event_id = array('id' => _eventbrite_sboc_event_id());    
   $eb_client = NULL;
   
   $auth_key = array();
   if (_eventbrite_sboc_OAuth_credentials($auth_key)){      
	  $eb_client = new Eventbrite($auth_key); 
	  drupal_set_message(t('Using OAUTH'));
   }else{
      $auth_key = _eventbrite_sboc_user_credentials();
	  $eb_client = new Eventbrite($auth_key, $auth_key['user_email'], $auth_key['user_pwd']);
	  drupal_set_message(t('Using UID/Password combination'));
   }
   
   $eb_attendee_list = $eb_client->event_list_attendees($event_id);
   usort($eb_attendee_list->attendees, '_eventbrite_sboc_sort_attendees_by_create_date');
   _eventbrite_sboc_cache_attendee_list($eb_attendee_list->attendees);  
   
   if (arg(5) != NULL){
     $display_list = (int)arg(5);
   }
      
   $params = array(
     'display_list' => $display_list, 
     'attendees' => $eb_attendee_list->attendees, 
     'oauth_login_result' => $auth_key['oauth_login_result'],
	);	  
	
   _eventbrite_sboc_debug('_eventbrite_sboc_debug_lists', $params); 
   
   $attendee_list = _eventbrite_sboc_display_pending_list($_SESSION['attendees']);
   $params = array(
      'attendee_list' => $attendee_list, 
	  'attendee_list_count' => count($eb_attendee_list->attendees),
    );
   
   return theme('attendee_list', $params);
 }
 
 function _eventbrite_sboc_debug($user_func, $args = array()){
    $debug_mode = variable_get('eventbrite_sboc_app_debug', 0);
    if ($debug_mode){
	  if (function_exists($user_func)){
	    call_user_func_array($user_func, $args);
	  }	
	}
 }
 
 function _eventbrite_sboc_debug_lists($display_list, $attendees, $oauth_login_result){
    $devel_loaded = module_exists('devel');
    if ($display_list == 1 && $devel_loaded && (variable_get('eventbrite_sboc_app_debug', 0) == 1)){
      if (variable_get('eventbrite_sboc_app_full_eb_list_attendees', 0) == 1) {	
		dpm($attendees);
	  }
	  if (variable_get('eventbrite_sboc_app_display_debug_data_rows', 0) == 1){
	    dpm($oauth_login_result);
        dpm($_SESSION['attendees']);
	    dpm($_SESSION['attendees_in_db']); 
		dpm($_SESSION['attendees_to_db']);
	  }
   }else{
      if (!$devel_loaded){
		drupal_set_message(t('Debug is enabled. Install and enable the \'Devel\' module to veiw data being processed by the application.'), 'warning');
	  }
   }
 }
 
 function _eventbrite_sboc_add_to_pending_list($attendee){
   /* Date and time record created on EB */
   $tz_name = _eventbrite_sboc_get_timezone_by_index(variable_get('eventbrite_event_registrations_tz', 0));
   $create_date = substr(_eventbrite_sboc_get_date_in_tz($attendee->attendee->created, $tz_name), 0, EVENTBRITE_SBOC_DATE_SUB_PART);
   /* Flag to indicate record does or does not exist in SBOC database */
   $attendee_in_db = _eventbrite_sboc_search_saved_attendees($_SESSION['attendees_in_db'], $attendee->attendee->id);
   /* Low date calculation */
   $low_date = _eventbrite_sboc_get_low_date();
   /* Check conditions for inclusion */
   $result = ($create_date >= $low_date); 
   $result = ($result && !$attendee_in_db);
   $result = ($result && ($attendee->attendee->order_type == EVENTBRITE_SBOC_ORDER_STATUS));
 
   return $result;
 }

 function _eventbrite_sboc_cache_attendee_list($attendees){
    $ctr = 0;
	$pending_ctr = 0;
	$_SESSION['attendees'] = array();
	$_SESSION['attendees_in_db'] = _eventbrite_sboc_get_attendees_from_db();
	$low_date = _eventbrite_sboc_get_low_date();
	$tz_name = _eventbrite_sboc_get_timezone_by_index(variable_get('eventbrite_event_registrations_tz', 0));
	$send_limit = variable_get('eventbrite_sboc_email_send_limit', EVENTBRITE_SBOC_EMAIL_SEND_LIMIT);
	foreach($attendees as $a){      
	  if ($ctr >= $send_limit || $low_date > substr(_eventbrite_sboc_get_date_in_tz($a->attendee->created, $tz_name), 0, 10)){	      
		 break;		
	  } 
	  if (_eventbrite_sboc_add_to_pending_list($a)){ 	 
	    $newAttendee = new stdClass;
	    $newAttendee->last_name = $a->attendee->last_name;
	    $newAttendee->first_name = $a->attendee->first_name;	  
	    $newAttendee->email = $a->attendee->email;
	    $newAttendee->id = $a->attendee->id;
	    $newAttendee->event_id = $a->attendee->event_id;
	    $newAttendee->order_id = $a->attendee->order_id;			
		$newAttendee->created = _eventbrite_sboc_get_date_in_tz($a->attendee->created, $tz_name);
	    $newAttendee->amount_paid = $a->attendee->amount_paid;
	    $newAttendee->registration_type = ($a->attendee->amount_paid > EVENTBRITE_SBOC_REGISTRATION_AMT_STD ? 'Premium' : 'Standard');
	    $newAttendee->ans_id = _eventbrite_sboc_answer_id($a->attendee->answers, EVENTBRITE_SBOC_QUESTION_ID_CATEGORY);
	    $newAttendee->category = $a->attendee->answers[$newAttendee->ans_id]->answer->answer_text[0];
	    $newAttendee->category_name = $a->attendee->answers[$newAttendee->ans_id]->answer->answer_text; 
	    $newAttendee->order_type = $a->attendee->order_type;	 
        $newAttendee->attachment = _eventbrite_sboc_select_attachment($newAttendee->category);		
		$newAttendee->attachment_mime_type = _eventbrite_sboc_mime_type(pathinfo($newAttendee->attachment, PATHINFO_EXTENSION));
	    $newAttendee->email_sent = 0;
	    $newAttendee->email_send_date = NULL;
	    $newAttendee->extra_message_1 = _eventbrite_sboc_extra_messaage_1($newAttendee->registration_type[0]);
	    $newAttendee->ans_id = _eventbrite_sboc_answer_id($a->attendee->answers, EVENTBRITE_SBOC_QUESTION_ID_CHILD_FIRST_NAME);
	    $newAttendee->child_first_name = $a->attendee->answers[$newAttendee->ans_id]->answer->answer_text;
	    $newAttendee->ans_id = _eventbrite_sboc_answer_id($a->attendee->answers, EVENTBRITE_SBOC_QUESTION_ID_CHILD_LAST_NAME);
	    $newAttendee->child_last_name = $a->attendee->answers[$newAttendee->ans_id]->answer->answer_text;
		$newAttendee->ans_id = _eventbrite_sboc_answer_id($a->attendee->answers, EVENTBRITE_SBOC_QUESTION_ID_REGION);
	    $newAttendee->region = $a->attendee->answers[$newAttendee->ans_id]->answer->answer_text;
	    $_SESSION['attendees'][] = $newAttendee;	
        $pending_ctr++;		
	  }
	  $ctr++;	  
	}	
	watchdog(EVENTBRITE_SBOC_MODULE_NAME, t('Total rows processed: !ctr'), array('!ctr' => $ctr), WATCHDOG_NOTICE);
	watchdog(EVENTBRITE_SBOC_MODULE_NAME, t('Total rows added to \'Pending List\': !pending_ctr'), array('!pending_ctr' => $pending_ctr), WATCHDOG_NOTICE);
	watchdog(EVENTBRITE_SBOC_MODULE_NAME, t('Low date: !low_date'), array('!low_date' => $low_date), WATCHDOG_NOTICE);
	
	return $pending_ctr;
 }
 
 function _eventbrite_sboc_get_attendees_from_db(){  
   $low_date = _eventbrite_sboc_get_low_date();
   $upper_limit = variable_get('eventbrite_sboc_email_send_limit', EVENTBRITE_SBOC_EMAIL_SEND_LIMIT);
   
   $query = db_select('eventbrite_sboc_attendees', 'e')  
   ->where('(e.event_id = \''. _eventbrite_sboc_event_id(). '\') AND (DATE_FORMAT(e.create_date,\'%Y-%m-%d\') >= \''. $low_date. '\')' )
   ->fields('e', array('event_id', 'attendee_id', 'order_id', 'email_address', 'email_sent', 'email_send_date',))   
   ->orderBy('attendee_id', variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER))
   ->range(0, $upper_limit * 2);
   _eventbrite_sboc_debug('_eventbrite_sboc_display_sql', array('query' => $query));
   $result = $query->execute()->fetchAll();
   /* ->execute()
   ->fetchAll();  */  
   return $result;
 }  
 
 function _eventbrite_sboc_get_attendees_from_db_paged($start_date, $end_date, $header){  
   $start_date = check_plain($start_date);
   $end_date = check_plain($end_date);
   $start_date = date('Y-m-d',strtotime($start_date));
   $end_date = date('Y-m-d',strtotime($end_date));
   
   $query = db_select('eventbrite_sboc_attendees', 'e')  
   ->where('(e.event_id = \''. _eventbrite_sboc_event_id(). '\') AND (DATE_FORMAT(e.create_date,\'%Y-%m-%d\') BETWEEN \''. $start_date . '\' AND \''.$end_date .'\')' )
   ->extend('PagerDefault')
   ->limit(10)  
   ->extend('TableSort')
   ->orderByHeader($header)
   ->fields('e', array('order_id', 'create_date', 'last_name', 'first_name', 'email_address', 'category', 'email_sent', 'email_send_date',))   
   ->orderBy('attendee_id', variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER));
   _eventbrite_sboc_debug('_eventbrite_sboc_display_sql', array('query' => $query));
   $result = $query->execute()->fetchAll();   
   return $result;
 } 
 
 function _eventbrite_sboc_display_sql($query){
   if (variable_get('eventbrite_sboc_app_show_sql', 0) == 1){
     dpq($query);
   }	 
 }
 
 function _eventbrite_sboc_get_attendees_from_db_paged_count($start_date, $end_date){  
   $start_date = check_plain($start_date);
   $end_date = check_plain($end_date);
   $start_date = date('Y-m-d',strtotime($start_date));
   $end_date = date('Y-m-d',strtotime($end_date));
   
   $result = db_select('eventbrite_sboc_attendees', 'e')  
   ->where('(e.event_id = \''. _eventbrite_sboc_event_id(). '\') AND (DATE_FORMAT(e.create_date,\'%Y-%m-%d\') BETWEEN \''. $start_date . '\' AND \''.$end_date .'\')' )
   ->fields('e')   
   ->orderBy('attendee_id', variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER))
   ->execute();   
   
   return $result->rowCount();
 } 

 function _eventbrite_sboc_answer_id($answers, $question_id){
   $result = 0;
   foreach($answers as $key => $ans){
     if ($ans->answer->question_id == $question_id){
	   $result = $key;
	   break;
	 }
   }
   return $result;
 }

 function _eventbrite_sboc_insert_attendees_to_db($rows){
    $query = db_insert('eventbrite_sboc_attendees')
	  ->fields(array('event_id', 
	  'attendee_id', 
	  'create_date', 
	  'order_id', 
	  'email_address',
	  'last_name', 
	  'first_name', 
	  'category', 
	  'order_type',
	  'email_sent', 
	  'email_send_date',));
	  
	foreach($rows as $row){
	  $query->values($row); 
    }	
	
	$query->execute();  
 }
 
 function _eventbrite_sboc_insert_attendee_to_db($attendee){
   $eid = db_insert('eventbrite_sboc_attendees')
     ->fields(array(
     'event_id' => $attendee->event_id,
     'attendee_id' => $attendee->id,
	 'create_date' => _eventbrite_sboc_get_timestamp(),
	 'order_id' => $attendee->order_id,
	 'email_address' => $attendee->email,
	 'last_name' => $attendee->last_name,
	 'first_name' => $attendee->first_name,
	 'category' => $attendee->category, 
	 'order_type' => $attendee->order_type, 
	 'email_sent' => $attendee->email_sent, 
	 'email_send_date' => $attendee->email_send_date,
  ))
  ->execute();
  return $eid;
 }

 function _eventbrite_sboc_select_max_event_attendee_id(){
   $result = 0; 
   $event_id = _eventbrite_sboc_event_id();
   $query =  db_select('_eventbrite_sboc_attendees','ea')
   ->fields('ea', 'event_id')
   ->addExpression('MAX(attendee_id)', 'max_attendee_id')
   ->condition('ea.event_id', $event_id, '=')
   ->groupBy('event_id')
   ->execute();
   return $result;
 }

 function _eventbrite_sboc_search_saved_attendees($attendees, $search_id){
    $result = FALSE;
    foreach($attendees as $a){
	  if($a->attendee_id == $search_id){
	     $result = TRUE;
	     break;
	  }
	}
    return $result; 	
 }

 function _eventbrite_sboc_select_attachment($category){  
   $attachment = DRUPAL_ROOT . '/'. variable_get('file_private_path', '') . '/';
   switch($category){
     case 'I':
	  $attachment .= variable_get('eventbrite_sboc_filename_3', '');
	  break;
	 case 'J':	  
	  $attachment .= variable_get('eventbrite_sboc_filename_2', '');
	  break; 
     case 'P':	  
	  $attachment .= variable_get('eventbrite_sboc_filename_1', '');
	  break; 
	 default:
	  $attachment = ''; 
      break;	
   }  
   return $attachment;
 }

 function _eventbrite_sboc_send_email($to, $message_body = '', $attachment='', $attachment_name='',
   $attachment_mime_type = ''){
   $result = FALSE;
   $params = array(); // create parameters array to hold various values for drupal_mail function
   $params['from'] = variable_get('eventbrite_sboc_email_return_address', '');
   $params['attachment'] = $attachment;
   $params['attachment_name'] = $attachment_name;
   $params['mime_type'] = $attachment_mime_type; //e.g. 'application/pdf';
   $params['subject'] = variable_get('eventbrite_sboc_file_node_title', variable_get('site_name', '(No Subject)'));
   $params['message_body'] = $message_body;
   try {
     $message = array();
	 if (!valid_email_address($to)){
	    throw new Exception(t('Invalid email address: \'%to\' for recipient', array('%to' => $to)));
	 }
	 if (!valid_email_address($params['from'])){
	    throw new Exception(t('Invalid email address: \'%from\' for sender', array('%from' => $params['from'])));
	 }
     $message = drupal_mail(EVENTBRITE_SBOC_MODULE_NAME, EVENTBRITE_SBOC_MAIL_KEY, $to, language_default(), $params, $params['from']); 
     if (!$message['result']){	 	 
	    throw new Exception(t('Email could not be sent to: %to', array('%to' => $to)));
	 }
	 $result = TRUE;
	 watchdog(EVENTBRITE_SBOC_MODULE_NAME, t('Email successfully sent to: %to'), array('%to' => $to), WATCHDOG_INFO); 	 
   }catch(Exception $e){
      watchdog(EVENTBRITE_SBOC_MODULE_NAME, t($e->getMessage()), array(), WATCHDOG_ERROR);
   }
   return $result;
 }

 function eventbrite_sboc_mail($key, &$message, $params){		
	$langcode = $message['language']->language;
	$message['subject'] = $params['subject'];		
	$message['body'][] = $params['message_body'];
	/* $message['body'][] = check_plain($params['message_body']); */
	if (isset($params['attachment']) && !empty($params['attachment'])){
	   $attachment = array(
		   'filecontent' => file_get_contents($params['attachment']),	
		   'filename' => $params['attachment_name'],
		   'filemime' => $params['mime_type'],
	    );
	    $message['params']['attachments'][] = $attachment; 	
	}	
 }

 function _eventbrite_sboc_process_emails($email=''){
   $attendees = (isset($_SESSION['attendees'])) ? $_SESSION['attendees'] : array();
   $email = trim($email);   
   $content = _eventbrite_sboc_message_body();
   $success = FALSE;
   $to = '';
   $ctr = 0;
   $debug_limit = variable_get('eventbrite_sboc_app_debug_send_limit', 1);
   $debug_mode = (variable_get('eventbrite_sboc_app_debug', 0) == 1);
   $_SESSION['attendees_to_db'] = array();
   foreach($attendees as $a){  
     $replacements = array(
	 '@first_name' => $a->first_name, 
	 '@last_name' => $a->last_name,
     '@category_name' => $a->category_name, 
	 '@extra_message_1' => $a->extra_message_1,
	 '@registration_type' => $a->registration_type,
	 '@child_first_name' => $a->child_first_name,
	 '@child_last_name' => $a->child_last_name,
	 );   
     $message_body = format_string($content, $replacements);	
	 $to = (empty($email) ? $a->email : $email);	 
     $success = _eventbrite_sboc_send_email($to, $message_body, $a->attachment, drupal_basename($a->attachment),
	 $a->attachment_mime_type);
     if ($success){
	   $timestamp = _eventbrite_sboc_get_timestamp();
	   $a->email_sent = 1;
	   $a->email_send_date = $timestamp;
	   $_SESSION['attendees_to_db'][] = array(
			'event_id' => $a->event_id,
			'attendee_id' => $a->id,
			'create_date' => $timestamp,
			'order_id' => $a->order_id,
			'email_address' => $a->email,
			'last_name' => $a->last_name,
			'first_name' => $a->first_name,
			'category' => $a->category, 
			'order_type' => $a->order_type, 
			'email_sent' => $a->email_sent, 
			'email_send_date' => $a->email_send_date,
	    );  
	 }
	 $ctr++;
	 if ($debug_mode){	    
	    if (($debug_limit > 0) && ($ctr >= $debug_limit)){
		   break; 
		}
	 }
   }   
   _eventbrite_sboc_insert_attendees_to_db($_SESSION['attendees_to_db']);
   $to = variable_get('eventbrite_sboc_email_return_address', ''); 
   if (count($attendees) && !empty($to)){
	 $summary = theme('table', _eventbrite_sboc_summary_table_array($attendees));
     $success = _eventbrite_sboc_send_email($to, $summary);
   }
 }

 function _eventbrite_sboc_extra_messaage_1($registration_type){
   $result = '';
   switch ($registration_type){
     case 'P':
	   $result = EVENTBRITE_SBOC_EXTRA_MESSAGE_1;
	   break;
	 case 'S':
	   break;
	 default:
	   break;
   }
   return $result;
 }

 function _eventbrite_sboc_message_body(){
   $output = '<p style="font-weight: bold;">'. t('Message could not be retrieved at this time.'). '</p>';
   $title = variable_get('eventbrite_sboc_content_title', '');
   $query = new EntityFieldQuery();
   $entities = $query->entityCondition('entity_type', 'node')
   ->propertyCondition('title', $title)
   ->range(0,1)
   ->execute();
   if (!empty($entities['node'])){
	 $node = node_load((int)current($entities['node'])->nid);
	 if (is_object($node)){
	   $lang = language_default();
	   $output = $node->body[$lang->language][0]['value'];
	 }
   }
   return $output;
 }
 
 function _eventbrite_sboc_summary_table_array($attendees){
   $result = array(); 
   $data = array();
   $header = array(t('Order Id'), t('Create Date'), t('Email Address'), t('Last Name'),   	
       t('First Name'), t('Category'), t('Region'), t('E-Manual Sent'), t('Send Date'),);
   
   foreach($attendees as $a){
     $data[] = array($a->order_id, $a->created, $a->email, $a->last_name, $a->first_name, 
	   $a->category, $a->region,(!empty($a->email_sent) ? 'Yes': 'No'), $a->email_send_date);
   }  
   $result = array('header'=>$header, 'rows'=>$data, 'attributes'=>array(), 'caption'=>t('E-Manual Deliver Summary'), 'colgroups'=>array(), 'empty'=>array(), 'sticky'=>array(),);   
   return $result;
 }
 
  function _eventbrite_sboc_sort_pending($a, $b){
    $result = -1;
    $sort = strtoupper(check_plain($_GET['sort']));
    $order = t(check_plain($_GET['order']));
	$header = array('#', t('Order Id'), t('Created'), t('Email Address'), t('Last Name'), t('First Name'),
       t('Category'), t('Region'), t('Amount Paid'), t('Order Status'),);
    $key =  array_search($order, $header);	
	$a_el = strtoupper($a[$key]);
	$b_el = strtoupper($b[$key]);
    if ($key !== FALSE)	{
	   try {
	     if ($a_el == $b_el){
           $result = 0;
         }else{
           if ($sort == 'ASC'){
             $result = ($a_el > $b_el) ? 1 : -1;
	       }else{
	         $result = ($a_el < $b_el) ? 1 : -1;
	       }
         }
       }catch(Exception $e){
          watchdog(EVENTBRITE_SBOC_MODULE_NAME, t($e->getMessage()), array(), WATCHDOG_ERROR);
       }
	}
    
    return $result;
 }
 
 function _eventbrite_sboc_display_pending_list($attendees){
   $result = array(); 
   $data = array();
   $header = array(
       array('data' => '#', 'field' => 'ctr'),
       array('data' => t('Order Id'), 'field' => 'order_id'),
	   array('data' => t('Created'), 'field' => 'create_date'),
       array('data' => t('Email Address'), 'field' => 'email_address'),
       array('data' => t('Last Name'), 'field' => 'last_name'),   	
       array('data' => t('First Name'), 'field' => 'first_name'), 	
       array('data' => t('Category'), 'field' => 'category_name'),	
	   array('data' => t('Region'), 'field' => 'region'),	
	   array('data' => t('Amount Paid'), 'field' => 'amount_paid'),	
	   array('data' => t('Order Status'), 'field' => 'order_type'),			   
    );	
   
   $ctr = 0;	
   foreach($attendees as $a){
     $data[] = array(++$ctr, $a->order_id, $a->created, $a->email, strtoupper($a->last_name), strtoupper($a->first_name), $a->category_name, $a->region, $a->amount_paid, $a->order_type,);
   }  
   
   $current_page = pager_default_initialize(count($attendees), EVENTBRITE_SBOC_PAGE_LIMIT);   
   $chunks = array_chunk($data, EVENTBRITE_SBOC_PAGE_LIMIT, TRUE); 

   if (isset($_GET['sort']) && isset($_GET['order']) && (count($chunks) > 0)){
	  usort($chunks[$current_page], "_eventbrite_sboc_sort_pending");
   }   
	  
   $caption = '<strong>'. t('Attendees not yet emailed - (!count)  - <a href="!link">New List >>', array('!count' => count($attendees), '!link' => 'admin/config/system/eventbrite_sboc/api_pending_list')).'</strong>';
  
   $rows = array();
   if (count($chunks) > 0){  
     $rows = $chunks[$current_page];
   }
   
   $result = array('header'=>$header, 'rows'=>$rows, 'attributes'=>array(), 'caption'=> $caption, 'colgroups'=>array(),);       
   $output = theme('table', $result);   
   $output .= theme('pager', array('quantity', count($attendees)));
   
   return $output;
 }
 
 function _eventbrite_sboc_display_attendee_list_from_db($start_date, $end_date){
   $result = array(); 
   $data = array();
   $header = array( 
        /*  array('data' => t('#'), 'field' => 'eid', 'sort' => 'desc'), */
		 array('data' => t('#'),),
	     array('data' => t('Order Id'), 'field' => 'order_id',),
		 array('data' => t('Order Date'), 'field' => 'create_date',),		 
		 array('data' => t('Email Address'), 'field' => 'last_name',),
		 array('data' => t('Last Name'), 'field' => 'first_name', ),
		 array('data' => t('First Name'), 'field' => 'email_address',), 
		 array('data' => t('Category'), 'field' => 'category',),
         array('data' => t('Email Sent'), 'field' => 'email_sent',), 
		 array('data' => t('Email Sent On'), 'field' => 'email_send_date',),
	);
	
   $attendees = _eventbrite_sboc_get_attendees_from_db_paged($start_date, $end_date, $header);
	
   $ctr = 0;	
   foreach($attendees as $a){
     $data[] = array(++$ctr, $a->order_id, date('Y-m-d', strtotime($a->create_date)), $a->email_address, 
	 strtoupper($a->last_name), strtoupper($a->first_name), $a->category, $a->email_sent, $a->email_send_date,);
   }     
   
   /********Add sorting routine here*******/
   
   /********Add sorting routine here*******/
   
   $link = url('admin/config/system/eventbrite_sboc/attendee_report');
   $count = _eventbrite_sboc_get_attendees_from_db_paged_count($start_date, $end_date);
   $caption = '<strong>'. t('Attendee count - (!count) - <a href="!link">Run a new report >></a>', array('!count' => $count,
   '!link' => $link)).'</strong>';
  
   $table = array('header'=>$header, 'rows'=>$data, 'attributes'=>array(), 'caption'=> $caption, 'colgroups'=>array(),);    
   
   $attendee_list = theme('table', $table);
   $attendee_list .= theme('pager', array('tags' => array()));
   
   $params = array(
      'attendee_list' => $attendee_list, 
	  'attendee_list_count' => count($attendees),
	  'start_date' => date('Y-M-d',strtotime($start_date)),
	  'end_date' => date('Y-M-d', strtotime($end_date)),
   );	
   return theme('attendee_list_from_db', $params);  
 }
 
 function _eventbrite_sboc_mime_type($ext){
   /* http://en.wikipedia.org/wiki/Internet_media_type */
   $result = '';
   switch($ext){    
	 case 'doc':
       $result = 'application/msword';
	   break; 
	 case 'gzip':
	 case 'zip':
       $result = 'application/zip';
	   break;   
     case 'pdf':
	   $result = 'application/pdf';
	   break;	   	
 	 case 'ppt':
       $result = 'application/mspowerpoint';
	   break;  
	 case 'xls':
	 case 'xlt':
       $result = 'application/msexcel';
	   break;        	   
	 default:
       break;	 
   }
   return $result;
 }
 
 function _eventbrite_sboc_event_info(){
   $result = t('No event information available at this time.');  
   $event_id = array('id' => _eventbrite_sboc_event_id());    
   $eb_client = NULL;
   
   $auth_key = array();
   if (_eventbrite_sboc_OAuth_credentials($auth_key)){      
	  $eb_client = new Eventbrite($auth_key); 
   }else{
      $auth_key = _eventbrite_sboc_user_credentials();
	  $eb_client = new Eventbrite($auth_key, $auth_key['user_email'], $auth_key['user_pwd']);
   }
   
   $eb_event_info = $eb_client->event_get($event_id); 
   $result = t('<strong><a href="@url" target="_blank">@title</a></strong>&nbsp;&nbsp;(@tz)<br />', array('@url'=>$eb_event_info->event->url, '@title'=>$eb_event_info->event->title,'@tz'=>$eb_event_info->event->timezone,));
   $result .= 'Start: ' . date('F j, Y g:i a', strtotime($eb_event_info->event->start_date)) . '<br />';
   $result .= 'End: ' . date('F j, Y g:i a', strtotime($eb_event_info->event->end_date)) . '<br />';
   $result .= 'Capacity: <strong>' . $eb_event_info->event->capacity . '</strong><br />';
   $result .= 'Attendee Count: <strong>' . $eb_event_info->event->num_attendee_rows . '</strong><br />';
   $pct = $eb_event_info->event->num_attendee_rows / $eb_event_info->event->capacity * 100;
   $pct = round($pct, 1);
   $result .= format_string('Progress: <strong>!pct%</strong> of goal', array('!pct' => $pct)) .'<br />';
   return $result;
 }
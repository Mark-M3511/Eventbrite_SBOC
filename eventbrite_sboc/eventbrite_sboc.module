<?php
/**
 * @file
 * eventbrite_sboc.module - manage sending purchased assets to SBOC registrants
 */

 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.helpers');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.db');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.email');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.debug');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.EB');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.theme');
 module_load_include('inc', 'eventbrite_sboc', 'includes/eventbrite_sboc.attendees');
 
/** defines **/
 define('EVENTBRITE_BASE_URL', 'https://www.eventbrite.com/json/');
 define('EVENTBRITE_SBOC_MAIL_TOKEN', 'eventbrite_sboc_mail_contact');
 define('EVENTBRITE_SBOC_LIST_SORT_ORDER', 'DESC');
 define('EVENTBRITE_SBOC_EMAIL_SEND_LIMIT', 100); 
 /* bof: Question Id's */
 define('EVENTBRITE_SBOC_QUESTION_ID_CHILD_FIRST_NAME', "Contestant's First Name");
 define('EVENTBRITE_SBOC_QUESTION_ID_CHILD_LAST_NAME', "Contestant's Last Name");
 define('EVENTBRITE_SBOC_QUESTION_ID_CATEGORY', "Contestant's Category (b.b. = born between)");
 define('EVENTBRITE_SBOC_QUESTION_ID_REGION', "Contestant's Region");
 define('EVENTBRITE_SBOC_QUESTION_ID_GENDER', "Contestant's Gender");
 define('EVENTBRITE_SBOC_QUESTION_ID_SCHOOL', "Contestant's School");
 define('EVENTBRITE_SBOC_QUESTION_ID_GRADE', "Contestant's Grade");
 define('EVENTBRITE_SBOC_QUESTION_ID_YOB', "Contestant's Year of Birth");
 define('EVENTBRITE_SBOC_QUESTION_ID_MOB', "Contestant's Month Of Birth"); 
 define('EVENTBRITE_SBOC_QUESTION_ID_DOB', "Contestant's Day Of Birth"); 
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDR_LN_1', "Contestant's Address Line 1");  
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDR_LN_2', "Contestant's Address Line 2");   
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDR_CITY', "Contestant's City"); 
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDR_PROV_STATE', "Contestant's Province"); 
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDR_POSTAL_ZIP', "Contestant's Postal Code");  
 define('EVENTBRITE_SBOC_QUESTION_ID_PHONE_1', "Contestant's Phone Number");   
 define('EVENTBRITE_SBOC_QUESTION_ID_PHONE_2', "Contestant's Phone Number 2");   
 define('EVENTBRITE_SBOC_QUESTION_ID_ADDTL_INFO', "Additional information for SBOC"); 
 // Order Status
 define('EVENTBRITE_SBOC_ORDER_TYPE_REFUNDED_CANCELED', 'RC'); 
 // Email
 define('EVENTBRITE_SBOC_QUESTION_ID_EMAIL_CONSENT', 'I consent to receiving email communications from SBOC');  
 define('EVENTBRITE_SBOC_EMAIL_COUNT', 'email_count');
 define('EVENTBRITE_SBOC_EMAIL_SUBJECT_DEFAULT', 'Registration Welcome');
 define('EVENTBRITE_SBOC_DEFAULT_TIME_SPAN', 14);
 /* eof: Question Id's */
 define('EVENTBRITE_SBOC_REGISTRATION_AMT_STD', 28);
 define('EVENTBRITE_SBOC_REGISTRATION_LOW_DATE', _eventbrite_sboc_get_date('-1 day')); 
 define('EVENTBRITE_SBOC_MAIL_KEY', 'send_manuals');
 define('EVENTBRITE_SBOC_MODULE_NAME', basename(__FILE__,'.module'));
 define('EVENTBRITE_SBOC_API_AUTH_PATH', 'admin/config/system/eventbrite_sboc/api_auth');
//  define('EVENTBRITE_SBOC_EXTRA_MESSAGE_1', ' The coaching and pronunciation CD will be mailed in January');
 define('EVENTBRITE_SBOC_EXTRA_MESSAGE_1', '');
 define('EVENTBRITE_SBOC_EXTRA_MESSAGE_2', 'Please Note: A change was made recently to your registration.');
 define('EVENTBRITE_SBOC_ORDER_STATUS_PP_COMPLETED', 'PayPal Completed');
 define('EVENTBRITE_SBOC_ORDER_STATUS_FREE_ORDER', 'Free Order');
 define('EVENTBRITE_SBOC_PAGE_LIMIT', 10);
 define('EVENTBRITE_SBOC_DATE_SUB_PART', 10);
 // Timezone  
 define('EVENTBRITE_SBOC_DATE_PACIFIC_TZ', 'America/Los Angeles');
 define('EVENTBRITE_SBOC_DATE_EASTERN_TZ', 'America/Toronto');
 // Cron Queue  
 define('EVENTBRITE_SBOC_CRON_QUEUE_EMAIL_DISTRIBUTION', 'cron_queue_eventbrite_sboc_email_distribution');
 // Attendees
 define('EVENTBRITE_SBOC_ATTENDEES_NEW', 'attendees_new');
 define('EVENTBRITE_SBOC_ATTENDEES_CHANGED', 'attendees_changed');
 define('EVENTBRITE_SBOC_ATTENDEES_NEW_COUNT', 'attendees_new_count');
 define('EVENTBRITE_SBOC_ATTENDEES_CHANGED_COUNT', 'attendees_changed_count');
 define('EVENTBRITE_SBOC_ATTENDEES_TO_DB', 'attendees_to_db');
 define('EVENTBRITE_SBOC_ATTENDEES_IN_DB', 'attendees_in_db');
 // menu path
 define('EVENTBRITE_SBOC_MENU_PATH_ADMIN_BASE_PATH', 'admin/config/system/eventbrite_sboc/');
 define('EVENTBRITE_SBOC_MENU_PATH_KICKSERVICE', EVENTBRITE_SBOC_MENU_PATH_ADMIN_BASE_PATH. 'kickservice');
 define('EVENTBRITE_SBOC_MENU_PATH_API_PENDING_LIST', EVENTBRITE_SBOC_MENU_PATH_ADMIN_BASE_PATH. 'api_pending_list');
 define('EVENTBRITE_SBOC_MENU_PATH_DBLOG', 'admin/reports/dblog');
 // Email
 define('EVENTBRITE_SBOC_EMAIL_BODY_1', 'body_content_1');  


/**
 * Implementation of hook_help()
 * 
 * @param String path
 *   The router menu path, as defined in hook_menu()
 * @param Array $arg
 *   Additional arguments taken from path
 * @return string
 *   An Array that corresponds to the return value of the arg() function
 */ 
 function eventbrite_sboc_help($path, $arg) {
    $output = '';
	switch($path){
		case 'admin/help#eventbrite_sboc':
		  $output = '<p>'. t('This module interacts with the Eventbrote API to retrieve event and event registraion data. Custom tables are updated and emails distributed according to specific criteria.').'</p>';
		  break;		
		default:
          break;		
	}
    return $output;
 }
 
 /**
 * Implementation of hook_permission
 *
 * @return Array
 *   An array of permission values, keyed by strings
 */ 
 function eventbrite_sboc_permission() {
    $result = array(
	  'administer ebsboc' => array(
	     'title' => t('Configure Eventbrite SBOC'),
		 'description' => t('Allows authorized users to configure this module'),
	   ),
	);
	return $result;
 }
  
 /**
 * Implementation of hook_menu
 *
 * @return Array
 *   An array of menu paths and arguments, keyed by strings
 */
 function eventbrite_sboc_menu(){ 
    // Admin menus below here.
	
	$items = array();
	
// 	$items['eventbrite_sboc/kickservice'] = array(
	$items[EVENTBRITE_SBOC_MENU_PATH_KICKSERVICE] = array(
	  'title' => t('Execute'),
	  'description' => t('Manually execute the service'),
	  'type'=> MENU_CALLBACK|MENU_NORMAL_ITEM,
	  'page callback' => '_eventbrite_sboc_kick_service',
	  'access arguments' => array('administer ebsboc'),
	);
	
	$items['admin/config/system/eventbrite_sboc/attendee_report/%/%'] = array(
	  'title' => t('Display Report'),
	  'description' => 'Display attendee list report',
	  'type'=> MENU_CALLBACK|MENU_NORMAL_ITEM,
	  'page callback' => '_eventbrite_sboc_display_attendee_list_from_db',
	  'page arguments' => array(5,6),
	  'access arguments' => array('administer ebsboc'),
	);
	
	/********************************Administrative links below***********************************/
	
    $items['admin/config/system/eventbrite_sboc'] = array(
	   'title' => 'Eventbrite for SBOC',
	   'description' => 'Enter Eventbrite API credentials and manage service preferences',
	   'page callback' => '_eventbrite_sboc_build_config_forms',
	   'access arguments' => array('administer ebsboc'),
	   'file' => 'eventbrite_sboc.admin_form.inc',
	   'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
	);
	
	$items['admin/config/system/eventbrite_sboc/main'] = array(
	   'title' => 'Configure Eventbrite SBOC',
       'type' => MENU_DEFAULT_LOCAL_TASK,
	);
		
	$items['admin/config/system/eventbrite_sboc/api_auth'] = array(
		'title' => 'Authorization',
		'type' =>  MENU_LOCAL_TASK,
		'description' => 'Eventbrite API calls - Authentication (OAUTH)',		
		'page callback' => '_eventbrite_sboc_authorization_api',
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc.admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 10,
	);	
	
	$items['admin/config/system/eventbrite_sboc/api_pending_list'] = array(
		'title' => 'Attendees - Pending',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Eventbrite API calls - Attendee List',		
// 		'page callback' => 'drupal_get_form',
// 		'page arguments' => array('_eventbrite_sboc_pending_list_form'),
		'page callback' => '_eventbrite_sboc_pending_list',
		'access arguments' => array('administer ebsboc'),
		'weight' => 20,
	);
	
	$items['admin/config/system/eventbrite_sboc/attendee_report'] = array(
		'title' => 'Attendees - Confirmed',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Run attendees report',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eventbrite_sboc_config_form_attendee_report'),
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc.admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 30,
	);	
		
	$items['admin/config/system/eventbrite_sboc/email'] = array(
		'title' => 'Email Settings',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Email Contact',
		'page callback' => '_eventbrite_sboc_build_email_test_forms',
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc.admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 40,
	);
	
	$items['admin/config/system/eventbrite_sboc/debug'] = array(
		'title' => 'Debugging',
		'type' =>  MENU_LOCAL_TASK | MENU_CALLBACK,
		'description' => 'Set debugging options for this module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eventbrite_sboc_debug_config_form'),
		'access arguments' => array('administer ebsboc'),
		'file' => 'eventbrite_sboc.admin_form.inc',
	    'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/includes',	
		'weight' => 50,
	);
	
	$items['eventbrite_sboc/logout'] = array(
		'title' => 'Eventbrite Logout',
		'type' =>  MENU_CALLBACK,
		'description' => 'Logged out of Eventbrite',
		'page callback' => '_eventbrite_sboc_api_logout',
		'access arguments' => TRUE,
	);	
	
	$items['admin/config/system/eventbrite_sboc/api_pending_list/1'] = array(
		'title' => 'Attendees - Pending',
		'type' =>  MENU_CALLBACK,
		'description' => 'Eventbrite API calls - Attendee List',		
		'page callback' => '_eventbrite_sboc_get_pending_list',
		'page arguments' => array(5),
		'access arguments' => array('administer ebsboc'),
	);
	
	return $items;
 }
 
 // -------------------------------------bof: hooks ---------------------------------------------- //
 /**
 * Implementation of hook_cron_queue_info()
 *
 * @return Array
 *   An array of queue worker callbacks and time values, keyed by strings
 */
 function eventbrite_sboc_cron_queue_info(){
    $queues[EVENTBRITE_SBOC_CRON_QUEUE_EMAIL_DISTRIBUTION] = array(
      'worker callback' => '_eventbrite_sboc_email_auto_sender',
      'time' => 120,
    );
    return $queues;
 }
 
 /**
 * Implementation of hook_form_alter()
 * @param Array form
 *	 Form values as a drupal style array
 * @param Array form_state
 *	 Form values in changed state as a drupal style array
 * @param String form_state
 *	 Unique form identifier
 * @return
 * 	 None
 */
 function eventbrite_sboc_form_alter(&$form, $form_state, $form_id){
   //drupal_set_message($form_id);
   switch($form_id){
     case '_eventbrite_sboc_debug_config_form':
	   /* $form['#submit'][] = '_eventbrite_sboc_debug_set_pl_timespan'; */
	   break;
	 case '_eventbrite_sboc_pending_list_form':
       $form['#submit'][] = '_eventbrite_sboc_generate_pending_list';	 
	   break;
   }   
 } 
 
// -------------------------------------eof: hooks ---------------------------------------------- //
   
/**
 * Function eventbrite_sboc_cronapi
 * @param 
 *	 None
 * @return 
 *	 None
 */
 function _eventbrite_sboc_clear_session_data(){
 	$_SESSION = array();
 }
  
 /**
 * Function eventbrite_sboc_cronapi
 * @param array form
 *	 Form values as a drupal style array
 * @param array form_state
 *	 Form values in changed state as a drupal style array
 * @param string form_state
 *	 Unique form identifier
 */
 function eventbrite_sboc_cronapi($op, $job = NULL){  
    switch($op) {
      case 'list':
        return array(
          EVENTBRITE_SBOC_CRON_QUEUE_EMAIL_DISTRIBUTION => 'Eventbrite-SBOC | Process attendee records and send emails',
        );
      	break;
      case 'rule':
        switch($job) {
          case EVENTBRITE_SBOC_CRON_QUEUE_EMAIL_DISTRIBUTION: 
		    return '*/5 * * * *'; // every 5 minutes by default
        };
      	break; 
      case 'execute':
        switch($job) {
          case EVENTBRITE_SBOC_CRON_QUEUE_EMAIL_DISTRIBUTION:
            _eventbrite_sboc_email_distribution_queue();
          break;
        }
       	break;
    }
 } 
 
 /**** Code specific to ulitmate cron module ****/
 
 /**
 * Function _eventbrite_sboc_kick_service
 *	 Callback function to kieck start fetching data from Eventbrite and processing emails
 * @param 
 *	 None
 */
 function _eventbrite_sboc_kick_service($email=''){    
 	if (variable_get('eventbrite_sboc_email_send_option','test') == 'test'){
 	   $alt_email = variable_get('site_mail', _eventbrite_sboc_api_user_email()); 	
       $email = variable_get('eventbrite_sboc_email_return_address', $alt_email);;
    }
    _eventbrite_sboc_get_pending_list();
	_eventbrite_sboc_process_emails($email, EVENTBRITE_SBOC_ATTENDEES_NEW);	
	_eventbrite_sboc_process_emails($email, EVENTBRITE_SBOC_ATTENDEES_CHANGED);	
	
 	$output =  _eventbrite_sboc_process_complete_page();
 	
 	_eventbrite_sboc_clear_session_data();
 	
 	return $output;
 }
 
 /**
 * Function _eventbrite_sboc_process_complete_page
 *	 Display completion message with option to get back to admin home page
 * @param 
 *	 None
 */
 function _eventbrite_sboc_process_complete_page(){
 	$params = array(
 	  'msg' => 'Process completed! Check system log for messages.',
 	  'count_new' => (int)$_SESSION[EVENTBRITE_SBOC_ATTENDEES_NEW_COUNT],
 	  'count_changed' => (int)$_SESSION[EVENTBRITE_SBOC_ATTENDEES_CHANGED_COUNT],
 	  'email_count' => (int)$_SESSION[EVENTBRITE_SBOC_EMAIL_COUNT],
 	);
    /* process_complete is name in theme array -- see hook_theme implementation */ 
    $theme_output = theme('process_complete', $params);	 
    if (module_exists('dblog')){
//  	   $theme_output .= theme('process_complete_goto_log', array());
 	}
 	
 	return $theme_output;
 }
 
 /** 
 * Function theme_process_complete_goto_log
 *	 See hook_theme implementation for more information
 * @param Array variables
 *	 Associative array of values passed in
 * @return String output
 *	 Rendered output as string
 */
 function theme_process_complete_goto_log($variables){
   $msg = $variables['log_path'];

   $form = drupal_get_form('_eventbrite_sboc_process_complete_goto_log');	
   $output = drupal_render($form);	
   
   return $output;
 }
 
 /** 
 * Function _eventbrite_sboc_process_complete
 *	 Form builder function
 * @param Array form
 *	 Associative array of values passed in
 * @param Array form_state
 *	 Associative array of values passed in
 * @return Array form
 *	Associate array of form settings/values
 */
 function _eventbrite_sboc_process_complete($form, &$form_state){
 	$form = array();
	$form['eventbrite_sboc_process_complete'] = array(
		'#type' => 'fieldset',
		'#title' => t('Process Complete'),
		'#description' => t(check_plain($form_state['build_info']['args'][0])),
	);
	
	$form['eventbrite_sboc_process_complete']['eventbrite_sboc_process_complete_count_new'] = array(
		'#prefix' => '<p>',
		 '#markup' => format_string('<span="font-weight: bold;">New</span> records processed: @count', array('@count' => $form_state['build_info']['args'][1],)),
		 '#suffix' => '</p>',
	);
	
	$form['eventbrite_sboc_process_complete']['eventbrite_sboc_process_complete_count_changed'] = array(
		'#prefix' => '<p>',
		 '#markup' => format_string('<span="font-weight: bold;">Changed</span> records processed: @count', array('@count' => $form_state['build_info']['args'][2],)),
		 '#suffix' => '</p>',
	);
	
	$form['eventbrite_sboc_process_complete']['eventbrite_sboc_process_complete_count_email'] = array(
		'#prefix' => '<p>',
		'#markup' => format_string('<span="font-weight: bold;">Emails</span> processed: @count', array('@count' => $form_state['build_info']['args'][3],)),
		'#suffix' => '</p>',
	);
	
	/*
	$form['eventbrite_sboc_process_complete']['eventbrite_sboc_process_complete_submit'] = array(
		'#type' => 'submit',
		'#value' => t('Return'),	
		'#submit' => array('_eventbrite_sboc_main_config_page_pending_list'),
	);
	*/
	return $form;
 }
 
 /** 
 * Function _eventbrite_sboc_process_complete
 *	 Form builder function
 * @param Array form
 *	 Associative array of values passed in
 * @param Array form_state
 *	 Associative array of values passed in
 * @return Array form
 *	Associate array of form settings/values
 */
 function _eventbrite_sboc_process_complete_goto_log($form, &$form_state){
   	$form = array();
   	$form['eventbrite_sboc_process_complete_goto_log'] = array(
		'#type' => 'fieldset',
		'#title' => t('View Log'),
		'#description' => t('Check the logs for data generated during processing'),
	);
	
	$form['eventbrite_sboc_process_complete_goto_log']['eventbrite_sboc_process_complete_goto_log_submit'] = array(
		'#type' => 'submit',
		'#value' => t('Go to Log'),	
		'#submit' => array('_eventbrite_sboc_main_dblog_page'),
	);
	
	return $form;
 }
 
 /**
 * Function _eventbrite_sboc_main_config_page
 * @param 
 *	 None
 */
 function _eventbrite_sboc_main_config_page(){
 	$path = url(EVENTBRITE_SBOC_MENU_PATH_ADMIN_BASE_PATH);
 	drupal_goto($path);
 }
 
 /**
 * Function _eventbrite_sboc_main_config_page_pending_list
 * @param 
 *	 None
 */
 function _eventbrite_sboc_main_config_page_pending_list(){
 	$path = url(EVENTBRITE_SBOC_MENU_PATH_API_PENDING_LIST);
 	drupal_goto($path);
 }
 
 /**
 * Function _eventbrite_sboc_main_dblog_page
 * @param 
 *	 None
 */
 function _eventbrite_sboc_main_dblog_page(){
 	$path = url(EVENTBRITE_SBOC_MENU_PATH_DBLOG);
 	drupal_goto($path);
 }
 
 /**
 * Function _eventbrite_sboc_authorization_api
 * @param 
 *	 None
 */
 function _eventbrite_sboc_authorization_api(){
   $eventbrite_api_key =  _eventbrite_sboc_api_key();
   $eventbrite_api_user_key = _eventbrite_sboc_api_user_key();
   $eventbrite_oauth_key = _eventbrite_sboc_oauth_key();  
   return theme('login_widget', array('eventbrite_api_key' => $eventbrite_api_key, 'eventbrite_oauth_key' => $eventbrite_oauth_key,));  
 }
   
 /**
 * Function _eventbrite_sboc_sort_attendees_by_id
 *  Sorts attendee list by attendee id
 * @param Object a
 *	First attendee object for A/B comparison
 * @param Object b
 *	Second attendee object for A/B comparion
 * @@return Integer result
 *	 0 if values are equal; -1 or 1 otherwise
 */
 function _eventbrite_sboc_sort_attendees_by_id($a, $b){   
   $result = -1;
   $sort = variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER);
   if ($a->attendee->id == $b->attendee->id){
      $result = 0;
   }
   else {
      if ($sort == 'ASC'){
        $result = ($a->attendee->id > $b->attendee->id) ? 1 : -1;
	  }else{
	    $result = ($a->attendee->id < $b->attendee->id) ? 1 : -1;
	  }
   }
   return $result;
 }
 
 /**
 * Function _eventbrite_sboc_sort_attendees_by_create_date
 *  Sorts attendee list by attedee record create date
 * @param Object a
 *	First attendee object for A/B comparison
 * @param Object b
 *	Second attendee object for A/B comparion
 * @@return Integer result
 *	 0 if values are equal; -1 or 1 otherwise
 */
 function _eventbrite_sboc_sort_attendees_by_create_date($a, $b){
   $tz_name = _eventbrite_sboc_get_timezone_by_index(variable_get('eventbrite_event_registrations_tz', 0));
   $_a = new StdClass;
   $_b = new StdClass;
   $_a->created = _eventbrite_sboc_get_date_in_tz($a->attendee->created, $tz_name);
   $_b->created = _eventbrite_sboc_get_date_in_tz($b->attendee->created, $tz_name);
   $sort = variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER);
   $result = -1;
   if ($_a->created == $_b->created){
      $result = 0;
   }
   else {
      if ($sort == 'ASC'){
        $result = ($_a->created > $_b->created) ? 1 : -1;
	  }else{
	    $result = ($_a->created < $_b->created) ? 1 : -1;
	  }
   }
   return $result;
 }
 
 
 /**
 * Function _eventbrite_sboc_pending_list
 *   Build forms for pending list configuration page
 * @param 
 *	 None
 * @return string output
 *	 Returns form strings
 */
function _eventbrite_sboc_pending_list(){
	$form = drupal_get_form('_eventbrite_sboc_pending_list_form');
    $output =  drupal_render($form);	
    $form = drupal_get_form('_eventbrite_sboc_process_list_form');
    $output .=  drupal_render($form);	
    
    return $output;
}

 
 /**
 * Function _eventbrite_sboc_user_credentials
 *   Configures form values for attendee list generation
 * @param 
 *	 None
 * @return Array form
 *	 Returns form Drupal style array
 */
//  function _eventbrite_sboc_pending_list_form(){
function _eventbrite_sboc_pending_list_form($form, &$form_state){
    
	$form['eventbrite_app_pending_list'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('Pending List Settings'),
	);
 
    $option_days = drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
	if (!isset($_SESSION['pending_list_time_span'])) {
	   $_SESSION['pending_list_time_span'] = 1;
	}
	$num_days = array_search((int)$_SESSION['pending_list_time_span'], $option_days);
	$form['eventbrite_app_pending_list']['eventbrite_sboc_app_pl_time_span'] = array(
	   '#type' => 'select',
	   '#title' => t('Time span (in days) for pending list'),
       '#options' =>  $option_days,	   
	   '#default_value' => ((isset($_SESSION['pending_list_time_span'])) ? $num_days : 1),
	   '#description' => t('Select the time span (in days) used to bulid the list of pending attendees. <strong>Please Note:</strong> This setting is session specific.'),
	);  
	
	$sort_order = drupal_map_assoc(array('ASC', 'DESC'));
	$form['eventbrite_app_pending_list']['eventbrite_sboc_app_data_sort_order'] = array(
	   '#type' => 'select',
	   '#title' => t('Date sort order'),
       '#options' =>  $sort_order,	   
	   '#default_value' => variable_get('eventbrite_sboc_app_data_sort_order', EVENTBRITE_SBOC_LIST_SORT_ORDER),
	   '#description' => t('Select the sort order (by date) for attendee recordsd: 1: ASCending 2: DESCending'),
	); 
	
	$form['eventbrite_app_pending_list']['eventbrite_sboc_submit'] = array(
	   '#type' => 'submit',
	   '#value' => t('Generate List'),		
	);	
	
    return $form;
 }
 
 /**
 * Function _eventbrite_sboc_user_credentials
 *   Configures form values for attendee list generation
 * @param Array form 
 *	 Drupal style form array
 * @param Array &form_state (PBR)
 *	 Drupal style form array with changed values
 * @return Array form
 *	 Returns form Drupal style array
 */
 function _eventbrite_sboc_process_list_form($form, &$form_state){
 	$form['eventbrite_sboc_process_list'] = array(
 	   '#type' => 'fieldset',
	   '#title' => t('Process Attendee Records & Post Changes to Database'),
 	);
 	$form['eventbrite_sboc_process_list']['eventbrite_sboc_submit'] = array(
	   '#type' => 'submit',
	   '#value' => t('Process List'),		
	);	
 	return $form;
 }
 
  /**
 * Function _eventbrite_sboc_user_credentials
 *   Configures form values for attendee list generation
 * @param Array form 
 *	 Drupal style form array
 * @param Array &form_state (PBR)
 *	 Drupal style form array with changed values
 * @return Array form
 *	 Returns form Drupal style array
 */
 function _eventbrite_sboc_process_list_form_submit($form, &$form_state){
 	 $form_state['redirect'] = EVENTBRITE_SBOC_MENU_PATH_KICKSERVICE;	
 }
 
 // $form_state['redirect'] = "admin/config/system/eventbrite_sboc/attendee_report/$start_date/$end_date";	
 
 /**
 * Function _eventbrite_sboc_generate_pending_list
 *  Redirects form output to new page 
 * @param Array form
 *	Drupal style array of form values (as configured)
 * @return String form_state
 *	Drupal style array of form values (when changed)
 */
 function _eventbrite_sboc_generate_pending_list($form, &$form_state){
	$num_days = (int)$form_state['values']['eventbrite_sboc_app_pl_time_span'];
	$_SESSION['pending_list_time_span'] = $num_days;
	drupal_set_message(t('Time span used to select records for \'Pending List\'= !days day(s). Low Date: !low_date', array('!days' => $num_days, '!low_date' => _eventbrite_sboc_get_date("-$num_days day"))));
	variable_set('eventbrite_sboc_app_data_sort_order', $form_state['values']['eventbrite_sboc_app_data_sort_order']);
	$form_state['redirect'] = 'admin/config/system/eventbrite_sboc/api_pending_list/1';
 }
 
 /**
 * Function _eventbrite_sboc_answer_text
 *   Retrieves array index of customized form values result
 * @param Object attendee
 *	 Attendee record object
 * @return Boolean result
 *	 Flag indicating record does or does not exists
 */
 function _eventbrite_sboc_answer_text($a, $ans_id){
 	$answer_text = '';
 	if ($ans_id > -1){
 	   $answer_text = $a->attendee->answers[$ans_id]->answer->answer_text;
 	}
 	return $answer_text;
 }
 
 /**
 * Function _eventbrite_sboc_answer_id
 *   Returns count of records for paginated display
 * @param Array answers
 *	 Array of customized questions and responses for each attendee record
 * @param Integer question_id
 *	 Eventbrite customized question id
 * @return Integer result
 *	 Integer indicating position of response in array
 */ 
 function _eventbrite_sboc_answer_id($answers, $question_id){
   $result = -1;
   foreach($answers as $key => $ans){
     if ($ans->answer->question == $question_id){ 
	   $result = $key;
	   break;
	 }
   }
   return $result;
 }
 
 /**
 * Function _eventbrite_sboc_email_to_attendee_pending
 *   Checks email_sent flag
 * @param Array form
 *	 Drupal style array of attendee record objects
 * @return Boolean result
 *	 Returns a boolean value indicating whether email was sent to attendee.
 */
 function _eventbrite_sboc_email_to_attendee_pending($attendees, $search_id){
    $result = FALSE;
    foreach($attendees as $a){
	  if($a->attendee_id == $search_id){
	     $result = !$a->email_sent;
	     break;
	  }
	}
    return $result; 	
 }